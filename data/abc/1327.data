{'TMP': 'C:\\Users\\lenovo\\AppData\\Local\\Temp\\', 'COMPUTERNAME': 'WIN-1EL34ECJO5C', 'VS110COMNTOOLS': 'C:\\Program Files\\Microsoft Visual Studio 11.0\\Common7\\Tools\\', 'USERDOMAIN': 'WIN-1EL34ECJO5C', 'PSMODULEPATH': 'C:\\Users\\lenovo\\Documents\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'PSEXECUTIONPOLICYPREFERENCE': 'Unrestricted', 'PROCESSOR_IDENTIFIER': 'x86 Family 6 Model 60 Stepping 3, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files', 'PROCESSOR_REVISION': '3c03', 'SYSTEMROOT': 'C:\\Windows', 'HOME': 'C:\\Users\\lenovo', 'GITHUB_SHELL': 'true', 'POSH_GIT': 'C:\\Users\\lenovo\\AppData\\Local\\GitHub\\PoshGit_73b8bf9c588df6d17c193e270da0ed4cf890d868\\profile.example.ps1', 'WINDOWS_TRACING_FLAGS': '3', 'SSH_AGENT_PID': '636', 'TERM': 'msys', 'TEMP': 'C:\\Users\\lenovo\\AppData\\Local\\Temp\\', 'PLINK_PROTOCOL': 'ssh', 'PROCESSOR_ARCHITECTURE': 'x86', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'EDITOR': 'GitPad', 'LOCALAPPDATA': 'C:\\Users\\lenovo\\AppData\\Local', 'HOMEPATH': '\\Users\\lenovo', 'USERNAME': 'lenovo', 'LOGONSERVER': '\\\\WIN-1EL34ECJO5C', 'SESSIONNAME': 'Console', 'PROGRAMDATA': 'C:\\ProgramData', 'SSH_AUTH_SOCK': '/tmp/ssh-e1o5AJm4j52h/agent.4028', 'GITHUB_POSH_GIT': 'C:\\Users\\lenovo\\AppData\\Local\\GitHub\\PoshGit_73b8bf9c588df6d17c193e270da0ed4cf890d868', 'PATH': 'C:\\Users\\lenovo\\AppData\\Local\\GitHub\\PortableGit_f02737a78695063deace08e96d5042710d3e32db\\cmd;C:\\Users\\lenovo\\AppData\\Local\\GitHub\\PortableGit_f02737a78695063deace08e96d5042710d3e32db\\usr\\bin;C:\\Users\\lenovo\\AppData\\Local\\GitHub\\PortableGit_f02737a78695063deace08e96d5042710d3e32db\\usr\\share\\git-tfs;C:\\Users\\lenovo\\AppData\\Local\\Apps\\2.0\\J7MQD1R2.YZ5\\BHWDR51N.ENQ\\gith..tion_317444273a93ac29_0003.0003_5794af8169eeff14;C:\\Users\\lenovo\\AppData\\Local\\GitHub\\lfs-x86_1.5.5;C:\\Python27\\;C:\\Python27\\Scripts;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\;C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\', 'GIT_INSTALL_ROOT': 'C:\\Users\\lenovo\\AppData\\Local\\GitHub\\PortableGit_f02737a78695063deace08e96d5042710d3e32db', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\Windows', 'WINDOWS_TRACING_LOGFILE': 'C:\\BVTBin\\Tests\\installpackage\\csilogfile.log', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'NUMBER_OF_PROCESSORS': '1', 'APPDATA': 'C:\\Users\\lenovo\\AppData\\Roaming', 'PROCESSOR_LEVEL': '6', 'GITHUB_GIT': 'C:\\Users\\lenovo\\AppData\\Local\\GitHub\\PortableGit_f02737a78695063deace08e96d5042710d3e32db', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\lenovo'}